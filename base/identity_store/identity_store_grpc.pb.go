// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: identity_store/identity_store.proto

package identity_store

import (
	context "context"
	config "github.com/raito-io/cli/base/util/config"
	version "github.com/raito-io/cli/base/util/version"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityStoreSyncServiceClient is the client API for IdentityStoreSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityStoreSyncServiceClient interface {
	CliVersionInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*version.CliBuildInformation, error)
	SyncIdentityStore(ctx context.Context, in *IdentityStoreSyncConfig, opts ...grpc.CallOption) (*IdentityStoreSyncResult, error)
	GetIdentityStoreMetaData(ctx context.Context, in *config.ConfigMap, opts ...grpc.CallOption) (*MetaData, error)
}

type identityStoreSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityStoreSyncServiceClient(cc grpc.ClientConnInterface) IdentityStoreSyncServiceClient {
	return &identityStoreSyncServiceClient{cc}
}

func (c *identityStoreSyncServiceClient) CliVersionInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*version.CliBuildInformation, error) {
	out := new(version.CliBuildInformation)
	err := c.cc.Invoke(ctx, "/identity_store.IdentityStoreSyncService/CliVersionInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityStoreSyncServiceClient) SyncIdentityStore(ctx context.Context, in *IdentityStoreSyncConfig, opts ...grpc.CallOption) (*IdentityStoreSyncResult, error) {
	out := new(IdentityStoreSyncResult)
	err := c.cc.Invoke(ctx, "/identity_store.IdentityStoreSyncService/SyncIdentityStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityStoreSyncServiceClient) GetIdentityStoreMetaData(ctx context.Context, in *config.ConfigMap, opts ...grpc.CallOption) (*MetaData, error) {
	out := new(MetaData)
	err := c.cc.Invoke(ctx, "/identity_store.IdentityStoreSyncService/GetIdentityStoreMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityStoreSyncServiceServer is the server API for IdentityStoreSyncService service.
// All implementations must embed UnimplementedIdentityStoreSyncServiceServer
// for forward compatibility
type IdentityStoreSyncServiceServer interface {
	CliVersionInformation(context.Context, *emptypb.Empty) (*version.CliBuildInformation, error)
	SyncIdentityStore(context.Context, *IdentityStoreSyncConfig) (*IdentityStoreSyncResult, error)
	GetIdentityStoreMetaData(context.Context, *config.ConfigMap) (*MetaData, error)
	mustEmbedUnimplementedIdentityStoreSyncServiceServer()
}

// UnimplementedIdentityStoreSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityStoreSyncServiceServer struct {
}

func (UnimplementedIdentityStoreSyncServiceServer) CliVersionInformation(context.Context, *emptypb.Empty) (*version.CliBuildInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CliVersionInformation not implemented")
}
func (UnimplementedIdentityStoreSyncServiceServer) SyncIdentityStore(context.Context, *IdentityStoreSyncConfig) (*IdentityStoreSyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncIdentityStore not implemented")
}
func (UnimplementedIdentityStoreSyncServiceServer) GetIdentityStoreMetaData(context.Context, *config.ConfigMap) (*MetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityStoreMetaData not implemented")
}
func (UnimplementedIdentityStoreSyncServiceServer) mustEmbedUnimplementedIdentityStoreSyncServiceServer() {
}

// UnsafeIdentityStoreSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityStoreSyncServiceServer will
// result in compilation errors.
type UnsafeIdentityStoreSyncServiceServer interface {
	mustEmbedUnimplementedIdentityStoreSyncServiceServer()
}

func RegisterIdentityStoreSyncServiceServer(s grpc.ServiceRegistrar, srv IdentityStoreSyncServiceServer) {
	s.RegisterService(&IdentityStoreSyncService_ServiceDesc, srv)
}

func _IdentityStoreSyncService_CliVersionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityStoreSyncServiceServer).CliVersionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity_store.IdentityStoreSyncService/CliVersionInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityStoreSyncServiceServer).CliVersionInformation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityStoreSyncService_SyncIdentityStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityStoreSyncConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityStoreSyncServiceServer).SyncIdentityStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity_store.IdentityStoreSyncService/SyncIdentityStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityStoreSyncServiceServer).SyncIdentityStore(ctx, req.(*IdentityStoreSyncConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityStoreSyncService_GetIdentityStoreMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(config.ConfigMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityStoreSyncServiceServer).GetIdentityStoreMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity_store.IdentityStoreSyncService/GetIdentityStoreMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityStoreSyncServiceServer).GetIdentityStoreMetaData(ctx, req.(*config.ConfigMap))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityStoreSyncService_ServiceDesc is the grpc.ServiceDesc for IdentityStoreSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityStoreSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity_store.IdentityStoreSyncService",
	HandlerType: (*IdentityStoreSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CliVersionInformation",
			Handler:    _IdentityStoreSyncService_CliVersionInformation_Handler,
		},
		{
			MethodName: "SyncIdentityStore",
			Handler:    _IdentityStoreSyncService_SyncIdentityStore_Handler,
		},
		{
			MethodName: "GetIdentityStoreMetaData",
			Handler:    _IdentityStoreSyncService_GetIdentityStoreMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_store/identity_store.proto",
}
