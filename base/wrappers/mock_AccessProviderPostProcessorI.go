// Code generated by mockery v2.39.1. DO NOT EDIT.

package wrappers

import (
	context "context"

	access_provider_post_processor "github.com/raito-io/cli/base/access_provider_post_processor"

	mock "github.com/stretchr/testify/mock"

	sync_from_target "github.com/raito-io/cli/base/access_provider/sync_from_target"
)

// MockAccessProviderPostProcessorI is an autogenerated mock type for the AccessProviderPostProcessorI type
type MockAccessProviderPostProcessorI struct {
	mock.Mock
}

type MockAccessProviderPostProcessorI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessProviderPostProcessorI) EXPECT() *MockAccessProviderPostProcessorI_Expecter {
	return &MockAccessProviderPostProcessorI_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function with given fields: ctx, accessProviderWriter, config
func (_m *MockAccessProviderPostProcessorI) Initialize(ctx context.Context, accessProviderWriter AccessProviderPostProcessorHandler, config *access_provider_post_processor.AccessProviderPostProcessorConfig) error {
	ret := _m.Called(ctx, accessProviderWriter, config)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AccessProviderPostProcessorHandler, *access_provider_post_processor.AccessProviderPostProcessorConfig) error); ok {
		r0 = rf(ctx, accessProviderWriter, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessProviderPostProcessorI_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockAccessProviderPostProcessorI_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - accessProviderWriter AccessProviderPostProcessorHandler
//   - config *access_provider_post_processor.AccessProviderPostProcessorConfig
func (_e *MockAccessProviderPostProcessorI_Expecter) Initialize(ctx interface{}, accessProviderWriter interface{}, config interface{}) *MockAccessProviderPostProcessorI_Initialize_Call {
	return &MockAccessProviderPostProcessorI_Initialize_Call{Call: _e.mock.On("Initialize", ctx, accessProviderWriter, config)}
}

func (_c *MockAccessProviderPostProcessorI_Initialize_Call) Run(run func(ctx context.Context, accessProviderWriter AccessProviderPostProcessorHandler, config *access_provider_post_processor.AccessProviderPostProcessorConfig)) *MockAccessProviderPostProcessorI_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AccessProviderPostProcessorHandler), args[2].(*access_provider_post_processor.AccessProviderPostProcessorConfig))
	})
	return _c
}

func (_c *MockAccessProviderPostProcessorI_Initialize_Call) Return(_a0 error) *MockAccessProviderPostProcessorI_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessProviderPostProcessorI_Initialize_Call) RunAndReturn(run func(context.Context, AccessProviderPostProcessorHandler, *access_provider_post_processor.AccessProviderPostProcessorConfig) error) *MockAccessProviderPostProcessorI_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// PostProcess provides a mock function with given fields: ctx, accessProvider
func (_m *MockAccessProviderPostProcessorI) PostProcess(ctx context.Context, accessProvider *sync_from_target.AccessProvider) (bool, error) {
	ret := _m.Called(ctx, accessProvider)

	if len(ret) == 0 {
		panic("no return value specified for PostProcess")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sync_from_target.AccessProvider) (bool, error)); ok {
		return rf(ctx, accessProvider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sync_from_target.AccessProvider) bool); ok {
		r0 = rf(ctx, accessProvider)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sync_from_target.AccessProvider) error); ok {
		r1 = rf(ctx, accessProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessProviderPostProcessorI_PostProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostProcess'
type MockAccessProviderPostProcessorI_PostProcess_Call struct {
	*mock.Call
}

// PostProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - accessProvider *sync_from_target.AccessProvider
func (_e *MockAccessProviderPostProcessorI_Expecter) PostProcess(ctx interface{}, accessProvider interface{}) *MockAccessProviderPostProcessorI_PostProcess_Call {
	return &MockAccessProviderPostProcessorI_PostProcess_Call{Call: _e.mock.On("PostProcess", ctx, accessProvider)}
}

func (_c *MockAccessProviderPostProcessorI_PostProcess_Call) Run(run func(ctx context.Context, accessProvider *sync_from_target.AccessProvider)) *MockAccessProviderPostProcessorI_PostProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sync_from_target.AccessProvider))
	})
	return _c
}

func (_c *MockAccessProviderPostProcessorI_PostProcess_Call) Return(_a0 bool, _a1 error) *MockAccessProviderPostProcessorI_PostProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessProviderPostProcessorI_PostProcess_Call) RunAndReturn(run func(context.Context, *sync_from_target.AccessProvider) (bool, error)) *MockAccessProviderPostProcessorI_PostProcess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessProviderPostProcessorI creates a new instance of MockAccessProviderPostProcessorI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessProviderPostProcessorI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessProviderPostProcessorI {
	mock := &MockAccessProviderPostProcessorI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
