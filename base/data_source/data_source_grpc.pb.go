// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: data_source/data_source.proto

package data_source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSourceSyncServiceClient is the client API for DataSourceSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourceSyncServiceClient interface {
	SyncDataSource(ctx context.Context, in *DataSourceSyncConfig, opts ...grpc.CallOption) (*DataSourceSyncResult, error)
	GetDataSourceMetaData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaData, error)
}

type dataSourceSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourceSyncServiceClient(cc grpc.ClientConnInterface) DataSourceSyncServiceClient {
	return &dataSourceSyncServiceClient{cc}
}

func (c *dataSourceSyncServiceClient) SyncDataSource(ctx context.Context, in *DataSourceSyncConfig, opts ...grpc.CallOption) (*DataSourceSyncResult, error) {
	out := new(DataSourceSyncResult)
	err := c.cc.Invoke(ctx, "/data_source.DataSourceSyncService/SyncDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceSyncServiceClient) GetDataSourceMetaData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaData, error) {
	out := new(MetaData)
	err := c.cc.Invoke(ctx, "/data_source.DataSourceSyncService/GetDataSourceMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceSyncServiceServer is the server API for DataSourceSyncService service.
// All implementations must embed UnimplementedDataSourceSyncServiceServer
// for forward compatibility
type DataSourceSyncServiceServer interface {
	SyncDataSource(context.Context, *DataSourceSyncConfig) (*DataSourceSyncResult, error)
	GetDataSourceMetaData(context.Context, *emptypb.Empty) (*MetaData, error)
	mustEmbedUnimplementedDataSourceSyncServiceServer()
}

// UnimplementedDataSourceSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataSourceSyncServiceServer struct {
}

func (UnimplementedDataSourceSyncServiceServer) SyncDataSource(context.Context, *DataSourceSyncConfig) (*DataSourceSyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDataSource not implemented")
}
func (UnimplementedDataSourceSyncServiceServer) GetDataSourceMetaData(context.Context, *emptypb.Empty) (*MetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceMetaData not implemented")
}
func (UnimplementedDataSourceSyncServiceServer) mustEmbedUnimplementedDataSourceSyncServiceServer() {}

// UnsafeDataSourceSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourceSyncServiceServer will
// result in compilation errors.
type UnsafeDataSourceSyncServiceServer interface {
	mustEmbedUnimplementedDataSourceSyncServiceServer()
}

func RegisterDataSourceSyncServiceServer(s grpc.ServiceRegistrar, srv DataSourceSyncServiceServer) {
	s.RegisterService(&DataSourceSyncService_ServiceDesc, srv)
}

func _DataSourceSyncService_SyncDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceSyncConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceSyncServiceServer).SyncDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_source.DataSourceSyncService/SyncDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceSyncServiceServer).SyncDataSource(ctx, req.(*DataSourceSyncConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceSyncService_GetDataSourceMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceSyncServiceServer).GetDataSourceMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_source.DataSourceSyncService/GetDataSourceMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceSyncServiceServer).GetDataSourceMetaData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourceSyncService_ServiceDesc is the grpc.ServiceDesc for DataSourceSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourceSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_source.DataSourceSyncService",
	HandlerType: (*DataSourceSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncDataSource",
			Handler:    _DataSourceSyncService_SyncDataSource_Handler,
		},
		{
			MethodName: "GetDataSourceMetaData",
			Handler:    _DataSourceSyncService_GetDataSourceMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_source/data_source.proto",
}
