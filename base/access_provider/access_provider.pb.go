// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: access_provider/access_provider.proto

package access_provider

import (
	config "github.com/raito-io/cli/base/util/config"
	error1 "github.com/raito-io/cli/base/util/error"
	version "github.com/raito-io/cli/base/util/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessSyncToTarget contains all necessary configuration parameters to export Data from Raito into DS
type AccessSyncToTarget struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ConfigMap *config.ConfigMap      `protobuf:"bytes,1,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty"`
	// SourceFile points to the file containing the access controls that need to be pushed to the data source.
	SourceFile string `protobuf:"bytes,2,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	// FeedbackTargetFile points to the file where the plugin needs to export the access controls feedback to.
	FeedbackTargetFile string `protobuf:"bytes,3,opt,name=feedback_target_file,json=feedbackTargetFile,proto3" json:"feedback_target_file,omitempty"`
	Prefix             string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Test               string `protobuf:"bytes,5,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AccessSyncToTarget) Reset() {
	*x = AccessSyncToTarget{}
	mi := &file_access_provider_access_provider_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessSyncToTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessSyncToTarget) ProtoMessage() {}

func (x *AccessSyncToTarget) ProtoReflect() protoreflect.Message {
	mi := &file_access_provider_access_provider_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessSyncToTarget.ProtoReflect.Descriptor instead.
func (*AccessSyncToTarget) Descriptor() ([]byte, []int) {
	return file_access_provider_access_provider_proto_rawDescGZIP(), []int{0}
}

func (x *AccessSyncToTarget) GetConfigMap() *config.ConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *AccessSyncToTarget) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *AccessSyncToTarget) GetFeedbackTargetFile() string {
	if x != nil {
		return x.FeedbackTargetFile
	}
	return ""
}

func (x *AccessSyncToTarget) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *AccessSyncToTarget) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

// AccessSyncFromTarget contains all necessary configuration parameters to import Data from Raito into DS
type AccessSyncFromTarget struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ConfigMap *config.ConfigMap      `protobuf:"bytes,1,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty"`
	// TargetFile points to the file where the plugin needs to export the access control naming.
	TargetFile                    string   `protobuf:"bytes,2,opt,name=target_file,json=targetFile,proto3" json:"target_file,omitempty"`
	Prefix                        string   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	LockAllWho                    bool     `protobuf:"varint,4,opt,name=lock_all_who,json=lockAllWho,proto3" json:"lock_all_who,omitempty"`
	LockAllWhat                   bool     `protobuf:"varint,5,opt,name=lock_all_what,json=lockAllWhat,proto3" json:"lock_all_what,omitempty"`
	LockAllNames                  bool     `protobuf:"varint,6,opt,name=lock_all_names,json=lockAllNames,proto3" json:"lock_all_names,omitempty"`
	LockAllDelete                 bool     `protobuf:"varint,7,opt,name=lock_all_delete,json=lockAllDelete,proto3" json:"lock_all_delete,omitempty"`
	LockAllInheritance            bool     `protobuf:"varint,8,opt,name=lock_all_inheritance,json=lockAllInheritance,proto3" json:"lock_all_inheritance,omitempty"`
	MakeNotInternalizable         []string `protobuf:"bytes,9,rep,name=make_not_internalizable,json=makeNotInternalizable,proto3" json:"make_not_internalizable,omitempty"`
	LockAllOwners                 bool     `protobuf:"varint,10,opt,name=lock_all_owners,json=lockAllOwners,proto3" json:"lock_all_owners,omitempty"`
	LockWhoByName                 []string `protobuf:"bytes,11,rep,name=lock_who_by_name,json=lockWhoByName,proto3" json:"lock_who_by_name,omitempty"`
	LockWhoByTag                  []string `protobuf:"bytes,12,rep,name=lock_who_by_tag,json=lockWhoByTag,proto3" json:"lock_who_by_tag,omitempty"`
	LockWhoWhenIncomplete         bool     `protobuf:"varint,13,opt,name=lock_who_when_incomplete,json=lockWhoWhenIncomplete,proto3" json:"lock_who_when_incomplete,omitempty"`
	LockWhatByName                []string `protobuf:"bytes,14,rep,name=lock_what_by_name,json=lockWhatByName,proto3" json:"lock_what_by_name,omitempty"`
	LockWhatByTag                 []string `protobuf:"bytes,15,rep,name=lock_what_by_tag,json=lockWhatByTag,proto3" json:"lock_what_by_tag,omitempty"`
	LockWhatWhenIncomplete        bool     `protobuf:"varint,16,opt,name=lock_what_when_incomplete,json=lockWhatWhenIncomplete,proto3" json:"lock_what_when_incomplete,omitempty"`
	LockInheritanceByName         []string `protobuf:"bytes,17,rep,name=lock_inheritance_by_name,json=lockInheritanceByName,proto3" json:"lock_inheritance_by_name,omitempty"`
	LockInheritanceByTag          []string `protobuf:"bytes,18,rep,name=lock_inheritance_by_tag,json=lockInheritanceByTag,proto3" json:"lock_inheritance_by_tag,omitempty"`
	LockInheritanceWhenIncomplete bool     `protobuf:"varint,19,opt,name=lock_inheritance_when_incomplete,json=lockInheritanceWhenIncomplete,proto3" json:"lock_inheritance_when_incomplete,omitempty"`
	FullyLockAll                  bool     `protobuf:"varint,20,opt,name=fully_lock_all,json=fullyLockAll,proto3" json:"fully_lock_all,omitempty"`
	FullyLockByName               []string `protobuf:"bytes,21,rep,name=fully_lock_by_name,json=fullyLockByName,proto3" json:"fully_lock_by_name,omitempty"`
	FullyLockByTag                []string `protobuf:"bytes,22,rep,name=fully_lock_by_tag,json=fullyLockByTag,proto3" json:"fully_lock_by_tag,omitempty"`
	FullyLockWhenIncomplete       bool     `protobuf:"varint,23,opt,name=fully_lock_when_incomplete,json=fullyLockWhenIncomplete,proto3" json:"fully_lock_when_incomplete,omitempty"`
	LockNamesByName               []string `protobuf:"bytes,24,rep,name=lock_names_by_name,json=lockNamesByName,proto3" json:"lock_names_by_name,omitempty"`
	LockNamesByTag                []string `protobuf:"bytes,25,rep,name=lock_names_by_tag,json=lockNamesByTag,proto3" json:"lock_names_by_tag,omitempty"`
	LockNamesWhenIncomplete       bool     `protobuf:"varint,26,opt,name=lock_names_when_incomplete,json=lockNamesWhenIncomplete,proto3" json:"lock_names_when_incomplete,omitempty"`
	LockDeleteByName              []string `protobuf:"bytes,27,rep,name=lock_delete_by_name,json=lockDeleteByName,proto3" json:"lock_delete_by_name,omitempty"`
	LockDeleteByTag               []string `protobuf:"bytes,28,rep,name=lock_delete_by_tag,json=lockDeleteByTag,proto3" json:"lock_delete_by_tag,omitempty"`
	LockDeleteWhenIncomplete      bool     `protobuf:"varint,29,opt,name=lock_delete_when_incomplete,json=lockDeleteWhenIncomplete,proto3" json:"lock_delete_when_incomplete,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *AccessSyncFromTarget) Reset() {
	*x = AccessSyncFromTarget{}
	mi := &file_access_provider_access_provider_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessSyncFromTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessSyncFromTarget) ProtoMessage() {}

func (x *AccessSyncFromTarget) ProtoReflect() protoreflect.Message {
	mi := &file_access_provider_access_provider_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessSyncFromTarget.ProtoReflect.Descriptor instead.
func (*AccessSyncFromTarget) Descriptor() ([]byte, []int) {
	return file_access_provider_access_provider_proto_rawDescGZIP(), []int{1}
}

func (x *AccessSyncFromTarget) GetConfigMap() *config.ConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *AccessSyncFromTarget) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *AccessSyncFromTarget) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *AccessSyncFromTarget) GetLockAllWho() bool {
	if x != nil {
		return x.LockAllWho
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockAllWhat() bool {
	if x != nil {
		return x.LockAllWhat
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockAllNames() bool {
	if x != nil {
		return x.LockAllNames
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockAllDelete() bool {
	if x != nil {
		return x.LockAllDelete
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockAllInheritance() bool {
	if x != nil {
		return x.LockAllInheritance
	}
	return false
}

func (x *AccessSyncFromTarget) GetMakeNotInternalizable() []string {
	if x != nil {
		return x.MakeNotInternalizable
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockAllOwners() bool {
	if x != nil {
		return x.LockAllOwners
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockWhoByName() []string {
	if x != nil {
		return x.LockWhoByName
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockWhoByTag() []string {
	if x != nil {
		return x.LockWhoByTag
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockWhoWhenIncomplete() bool {
	if x != nil {
		return x.LockWhoWhenIncomplete
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockWhatByName() []string {
	if x != nil {
		return x.LockWhatByName
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockWhatByTag() []string {
	if x != nil {
		return x.LockWhatByTag
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockWhatWhenIncomplete() bool {
	if x != nil {
		return x.LockWhatWhenIncomplete
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockInheritanceByName() []string {
	if x != nil {
		return x.LockInheritanceByName
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockInheritanceByTag() []string {
	if x != nil {
		return x.LockInheritanceByTag
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockInheritanceWhenIncomplete() bool {
	if x != nil {
		return x.LockInheritanceWhenIncomplete
	}
	return false
}

func (x *AccessSyncFromTarget) GetFullyLockAll() bool {
	if x != nil {
		return x.FullyLockAll
	}
	return false
}

func (x *AccessSyncFromTarget) GetFullyLockByName() []string {
	if x != nil {
		return x.FullyLockByName
	}
	return nil
}

func (x *AccessSyncFromTarget) GetFullyLockByTag() []string {
	if x != nil {
		return x.FullyLockByTag
	}
	return nil
}

func (x *AccessSyncFromTarget) GetFullyLockWhenIncomplete() bool {
	if x != nil {
		return x.FullyLockWhenIncomplete
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockNamesByName() []string {
	if x != nil {
		return x.LockNamesByName
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockNamesByTag() []string {
	if x != nil {
		return x.LockNamesByTag
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockNamesWhenIncomplete() bool {
	if x != nil {
		return x.LockNamesWhenIncomplete
	}
	return false
}

func (x *AccessSyncFromTarget) GetLockDeleteByName() []string {
	if x != nil {
		return x.LockDeleteByName
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockDeleteByTag() []string {
	if x != nil {
		return x.LockDeleteByTag
	}
	return nil
}

func (x *AccessSyncFromTarget) GetLockDeleteWhenIncomplete() bool {
	if x != nil {
		return x.LockDeleteWhenIncomplete
	}
	return false
}

// AccessSyncResult represents the result from the data access sync process.
// A potential error is also modeled in here so specific errors remain intact when passed over RPC.
type AccessSyncResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in access_provider/access_provider.proto.
	Error               *error1.ErrorResult `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	AccessProviderCount int32               `protobuf:"varint,2,opt,name=access_provider_count,json=accessProviderCount,proto3" json:"access_provider_count,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AccessSyncResult) Reset() {
	*x = AccessSyncResult{}
	mi := &file_access_provider_access_provider_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessSyncResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessSyncResult) ProtoMessage() {}

func (x *AccessSyncResult) ProtoReflect() protoreflect.Message {
	mi := &file_access_provider_access_provider_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessSyncResult.ProtoReflect.Descriptor instead.
func (*AccessSyncResult) Descriptor() ([]byte, []int) {
	return file_access_provider_access_provider_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in access_provider/access_provider.proto.
func (x *AccessSyncResult) GetError() *error1.ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AccessSyncResult) GetAccessProviderCount() int32 {
	if x != nil {
		return x.AccessProviderCount
	}
	return 0
}

// AccessSyncConfig gives us information on how the CLI can sync access providers
type AccessSyncConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SupportPartialSync if true, syncing only out of sync access providers is allowed
	SupportPartialSync bool `protobuf:"varint,1,opt,name=support_partial_sync,json=supportPartialSync,proto3" json:"support_partial_sync,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AccessSyncConfig) Reset() {
	*x = AccessSyncConfig{}
	mi := &file_access_provider_access_provider_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessSyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessSyncConfig) ProtoMessage() {}

func (x *AccessSyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_access_provider_access_provider_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessSyncConfig.ProtoReflect.Descriptor instead.
func (*AccessSyncConfig) Descriptor() ([]byte, []int) {
	return file_access_provider_access_provider_proto_rawDescGZIP(), []int{3}
}

func (x *AccessSyncConfig) GetSupportPartialSync() bool {
	if x != nil {
		return x.SupportPartialSync
	}
	return false
}

var File_access_provider_access_provider_proto protoreflect.FileDescriptor

const file_access_provider_access_provider_proto_rawDesc = "" +
	"\n" +
	"%access_provider/access_provider.proto\x12\x0faccess_provider\x1a\x1bgoogle/protobuf/empty.proto\x1a\x18util/config/config.proto\x1a\x16util/error/error.proto\x1a\x1autil/version/version.proto\"\xca\x01\n" +
	"\x12AccessSyncToTarget\x125\n" +
	"\n" +
	"config_map\x18\x01 \x01(\v2\x16.util.config.ConfigMapR\tconfigMap\x12\x1f\n" +
	"\vsource_file\x18\x02 \x01(\tR\n" +
	"sourceFile\x120\n" +
	"\x14feedback_target_file\x18\x03 \x01(\tR\x12feedbackTargetFile\x12\x16\n" +
	"\x06prefix\x18\x04 \x01(\tR\x06prefix\x12\x12\n" +
	"\x04test\x18\x05 \x01(\tR\x04test\"\xe8\n" +
	"\n" +
	"\x14AccessSyncFromTarget\x125\n" +
	"\n" +
	"config_map\x18\x01 \x01(\v2\x16.util.config.ConfigMapR\tconfigMap\x12\x1f\n" +
	"\vtarget_file\x18\x02 \x01(\tR\n" +
	"targetFile\x12\x16\n" +
	"\x06prefix\x18\x03 \x01(\tR\x06prefix\x12 \n" +
	"\flock_all_who\x18\x04 \x01(\bR\n" +
	"lockAllWho\x12\"\n" +
	"\rlock_all_what\x18\x05 \x01(\bR\vlockAllWhat\x12$\n" +
	"\x0elock_all_names\x18\x06 \x01(\bR\flockAllNames\x12&\n" +
	"\x0flock_all_delete\x18\a \x01(\bR\rlockAllDelete\x120\n" +
	"\x14lock_all_inheritance\x18\b \x01(\bR\x12lockAllInheritance\x126\n" +
	"\x17make_not_internalizable\x18\t \x03(\tR\x15makeNotInternalizable\x12&\n" +
	"\x0flock_all_owners\x18\n" +
	" \x01(\bR\rlockAllOwners\x12'\n" +
	"\x10lock_who_by_name\x18\v \x03(\tR\rlockWhoByName\x12%\n" +
	"\x0flock_who_by_tag\x18\f \x03(\tR\flockWhoByTag\x127\n" +
	"\x18lock_who_when_incomplete\x18\r \x01(\bR\x15lockWhoWhenIncomplete\x12)\n" +
	"\x11lock_what_by_name\x18\x0e \x03(\tR\x0elockWhatByName\x12'\n" +
	"\x10lock_what_by_tag\x18\x0f \x03(\tR\rlockWhatByTag\x129\n" +
	"\x19lock_what_when_incomplete\x18\x10 \x01(\bR\x16lockWhatWhenIncomplete\x127\n" +
	"\x18lock_inheritance_by_name\x18\x11 \x03(\tR\x15lockInheritanceByName\x125\n" +
	"\x17lock_inheritance_by_tag\x18\x12 \x03(\tR\x14lockInheritanceByTag\x12G\n" +
	" lock_inheritance_when_incomplete\x18\x13 \x01(\bR\x1dlockInheritanceWhenIncomplete\x12$\n" +
	"\x0efully_lock_all\x18\x14 \x01(\bR\ffullyLockAll\x12+\n" +
	"\x12fully_lock_by_name\x18\x15 \x03(\tR\x0ffullyLockByName\x12)\n" +
	"\x11fully_lock_by_tag\x18\x16 \x03(\tR\x0efullyLockByTag\x12;\n" +
	"\x1afully_lock_when_incomplete\x18\x17 \x01(\bR\x17fullyLockWhenIncomplete\x12+\n" +
	"\x12lock_names_by_name\x18\x18 \x03(\tR\x0flockNamesByName\x12)\n" +
	"\x11lock_names_by_tag\x18\x19 \x03(\tR\x0elockNamesByTag\x12;\n" +
	"\x1alock_names_when_incomplete\x18\x1a \x01(\bR\x17lockNamesWhenIncomplete\x12-\n" +
	"\x13lock_delete_by_name\x18\x1b \x03(\tR\x10lockDeleteByName\x12+\n" +
	"\x12lock_delete_by_tag\x18\x1c \x03(\tR\x0flockDeleteByTag\x12=\n" +
	"\x1block_delete_when_incomplete\x18\x1d \x01(\bR\x18lockDeleteWhenIncomplete\"y\n" +
	"\x10AccessSyncResult\x121\n" +
	"\x05error\x18\x01 \x01(\v2\x17.util.error.ErrorResultB\x02\x18\x01R\x05error\x122\n" +
	"\x15access_provider_count\x18\x02 \x01(\x05R\x13accessProviderCount\"P\n" +
	"\x10AccessSyncConfig\x120\n" +
	"\x14support_partial_sync\x18\x01 \x01(\bR\x12supportPartialSyncJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x042\xec\x02\n" +
	"\x19AccessProviderSyncService\x12R\n" +
	"\x15CliVersionInformation\x12\x16.google.protobuf.Empty\x1a!.util.version.CliBuildInformation\x12Z\n" +
	"\x0eSyncFromTarget\x12%.access_provider.AccessSyncFromTarget\x1a!.access_provider.AccessSyncResult\x12V\n" +
	"\fSyncToTarget\x12#.access_provider.AccessSyncToTarget\x1a!.access_provider.AccessSyncResult\x12G\n" +
	"\n" +
	"SyncConfig\x12\x16.google.protobuf.Empty\x1a!.access_provider.AccessSyncConfigB\xb0\x01\n" +
	"\x13com.access_providerB\x13AccessProviderProtoP\x01Z,github.com/raito-io/cli/base/access_provider\xa2\x02\x03AXX\xaa\x02\x0eAccessProvider\xca\x02\x0eAccessProvider\xe2\x02\x1aAccessProvider\\GPBMetadata\xea\x02\x0eAccessProviderb\x06proto3"

var (
	file_access_provider_access_provider_proto_rawDescOnce sync.Once
	file_access_provider_access_provider_proto_rawDescData []byte
)

func file_access_provider_access_provider_proto_rawDescGZIP() []byte {
	file_access_provider_access_provider_proto_rawDescOnce.Do(func() {
		file_access_provider_access_provider_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_access_provider_access_provider_proto_rawDesc), len(file_access_provider_access_provider_proto_rawDesc)))
	})
	return file_access_provider_access_provider_proto_rawDescData
}

var file_access_provider_access_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_access_provider_access_provider_proto_goTypes = []any{
	(*AccessSyncToTarget)(nil),          // 0: access_provider.AccessSyncToTarget
	(*AccessSyncFromTarget)(nil),        // 1: access_provider.AccessSyncFromTarget
	(*AccessSyncResult)(nil),            // 2: access_provider.AccessSyncResult
	(*AccessSyncConfig)(nil),            // 3: access_provider.AccessSyncConfig
	(*config.ConfigMap)(nil),            // 4: util.config.ConfigMap
	(*error1.ErrorResult)(nil),          // 5: util.error.ErrorResult
	(*emptypb.Empty)(nil),               // 6: google.protobuf.Empty
	(*version.CliBuildInformation)(nil), // 7: util.version.CliBuildInformation
}
var file_access_provider_access_provider_proto_depIdxs = []int32{
	4, // 0: access_provider.AccessSyncToTarget.config_map:type_name -> util.config.ConfigMap
	4, // 1: access_provider.AccessSyncFromTarget.config_map:type_name -> util.config.ConfigMap
	5, // 2: access_provider.AccessSyncResult.error:type_name -> util.error.ErrorResult
	6, // 3: access_provider.AccessProviderSyncService.CliVersionInformation:input_type -> google.protobuf.Empty
	1, // 4: access_provider.AccessProviderSyncService.SyncFromTarget:input_type -> access_provider.AccessSyncFromTarget
	0, // 5: access_provider.AccessProviderSyncService.SyncToTarget:input_type -> access_provider.AccessSyncToTarget
	6, // 6: access_provider.AccessProviderSyncService.SyncConfig:input_type -> google.protobuf.Empty
	7, // 7: access_provider.AccessProviderSyncService.CliVersionInformation:output_type -> util.version.CliBuildInformation
	2, // 8: access_provider.AccessProviderSyncService.SyncFromTarget:output_type -> access_provider.AccessSyncResult
	2, // 9: access_provider.AccessProviderSyncService.SyncToTarget:output_type -> access_provider.AccessSyncResult
	3, // 10: access_provider.AccessProviderSyncService.SyncConfig:output_type -> access_provider.AccessSyncConfig
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_access_provider_access_provider_proto_init() }
func file_access_provider_access_provider_proto_init() {
	if File_access_provider_access_provider_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_access_provider_access_provider_proto_rawDesc), len(file_access_provider_access_provider_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_access_provider_access_provider_proto_goTypes,
		DependencyIndexes: file_access_provider_access_provider_proto_depIdxs,
		MessageInfos:      file_access_provider_access_provider_proto_msgTypes,
	}.Build()
	File_access_provider_access_provider_proto = out.File
	file_access_provider_access_provider_proto_goTypes = nil
	file_access_provider_access_provider_proto_depIdxs = nil
}
