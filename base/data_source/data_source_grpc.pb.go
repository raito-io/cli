// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: data_source.proto

package data_source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSourceSyncClient is the client API for DataSourceSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourceSyncClient interface {
	SyncDataSource(ctx context.Context, in *DataSourceSyncConfig, opts ...grpc.CallOption) (*DataSourceSyncResult, error)
	GetDataSourceMetaData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetaData, error)
}

type dataSourceSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourceSyncClient(cc grpc.ClientConnInterface) DataSourceSyncClient {
	return &dataSourceSyncClient{cc}
}

func (c *dataSourceSyncClient) SyncDataSource(ctx context.Context, in *DataSourceSyncConfig, opts ...grpc.CallOption) (*DataSourceSyncResult, error) {
	out := new(DataSourceSyncResult)
	err := c.cc.Invoke(ctx, "/proto.DataSourceSync/SyncDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceSyncClient) GetDataSourceMetaData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetaData, error) {
	out := new(MetaData)
	err := c.cc.Invoke(ctx, "/proto.DataSourceSync/GetDataSourceMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceSyncServer is the server API for DataSourceSync service.
// All implementations must embed UnimplementedDataSourceSyncServer
// for forward compatibility
type DataSourceSyncServer interface {
	SyncDataSource(context.Context, *DataSourceSyncConfig) (*DataSourceSyncResult, error)
	GetDataSourceMetaData(context.Context, *Empty) (*MetaData, error)
	mustEmbedUnimplementedDataSourceSyncServer()
}

// UnimplementedDataSourceSyncServer must be embedded to have forward compatible implementations.
type UnimplementedDataSourceSyncServer struct {
}

func (UnimplementedDataSourceSyncServer) SyncDataSource(context.Context, *DataSourceSyncConfig) (*DataSourceSyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDataSource not implemented")
}
func (UnimplementedDataSourceSyncServer) GetDataSourceMetaData(context.Context, *Empty) (*MetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceMetaData not implemented")
}
func (UnimplementedDataSourceSyncServer) mustEmbedUnimplementedDataSourceSyncServer() {}

// UnsafeDataSourceSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourceSyncServer will
// result in compilation errors.
type UnsafeDataSourceSyncServer interface {
	mustEmbedUnimplementedDataSourceSyncServer()
}

func RegisterDataSourceSyncServer(s grpc.ServiceRegistrar, srv DataSourceSyncServer) {
	s.RegisterService(&DataSourceSync_ServiceDesc, srv)
}

func _DataSourceSync_SyncDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceSyncConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceSyncServer).SyncDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataSourceSync/SyncDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceSyncServer).SyncDataSource(ctx, req.(*DataSourceSyncConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceSync_GetDataSourceMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceSyncServer).GetDataSourceMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataSourceSync/GetDataSourceMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceSyncServer).GetDataSourceMetaData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourceSync_ServiceDesc is the grpc.ServiceDesc for DataSourceSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourceSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataSourceSync",
	HandlerType: (*DataSourceSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncDataSource",
			Handler:    _DataSourceSync_SyncDataSource_Handler,
		},
		{
			MethodName: "GetDataSourceMetaData",
			Handler:    _DataSourceSync_GetDataSourceMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_source.proto",
}
