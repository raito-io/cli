// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	sync_from_target "github.com/raito-io/cli/base/access_provider/sync_from_target"
	mock "github.com/stretchr/testify/mock"
)

// PostProcessorSourceFileParser is an autogenerated mock type for the PostProcessorSourceFileParser type
type PostProcessorSourceFileParser struct {
	mock.Mock
}

type PostProcessorSourceFileParser_Expecter struct {
	mock *mock.Mock
}

func (_m *PostProcessorSourceFileParser) EXPECT() *PostProcessorSourceFileParser_Expecter {
	return &PostProcessorSourceFileParser_Expecter{mock: &_m.Mock}
}

// ParseAccessProviders provides a mock function with given fields:
func (_m *PostProcessorSourceFileParser) ParseAccessProviders() ([]*sync_from_target.AccessProvider, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseAccessProviders")
	}

	var r0 []*sync_from_target.AccessProvider
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*sync_from_target.AccessProvider, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*sync_from_target.AccessProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sync_from_target.AccessProvider)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProcessorSourceFileParser_ParseAccessProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAccessProviders'
type PostProcessorSourceFileParser_ParseAccessProviders_Call struct {
	*mock.Call
}

// ParseAccessProviders is a helper method to define mock.On call
func (_e *PostProcessorSourceFileParser_Expecter) ParseAccessProviders() *PostProcessorSourceFileParser_ParseAccessProviders_Call {
	return &PostProcessorSourceFileParser_ParseAccessProviders_Call{Call: _e.mock.On("ParseAccessProviders")}
}

func (_c *PostProcessorSourceFileParser_ParseAccessProviders_Call) Run(run func()) *PostProcessorSourceFileParser_ParseAccessProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostProcessorSourceFileParser_ParseAccessProviders_Call) Return(_a0 []*sync_from_target.AccessProvider, _a1 error) *PostProcessorSourceFileParser_ParseAccessProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostProcessorSourceFileParser_ParseAccessProviders_Call) RunAndReturn(run func() ([]*sync_from_target.AccessProvider, error)) *PostProcessorSourceFileParser_ParseAccessProviders_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostProcessorSourceFileParser creates a new instance of PostProcessorSourceFileParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostProcessorSourceFileParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostProcessorSourceFileParser {
	mock := &PostProcessorSourceFileParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
