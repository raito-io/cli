// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: access_provider_post_processor/access_provider_post_processor.proto

package access_provider_post_processor

import (
	context "context"
	version "github.com/raito-io/cli/base/util/version"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessProviderPostProcessorService_CliVersionInformation_FullMethodName = "/access_provider_post_processor.AccessProviderPostProcessorService/CliVersionInformation"
	AccessProviderPostProcessorService_PostProcessFromTarget_FullMethodName = "/access_provider_post_processor.AccessProviderPostProcessorService/PostProcessFromTarget"
)

// AccessProviderPostProcessorServiceClient is the client API for AccessProviderPostProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessProviderPostProcessorServiceClient interface {
	CliVersionInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*version.CliBuildInformation, error)
	PostProcessFromTarget(ctx context.Context, in *AccessProviderPostProcessorConfig, opts ...grpc.CallOption) (*AccessProviderPostProcessorResult, error)
}

type accessProviderPostProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessProviderPostProcessorServiceClient(cc grpc.ClientConnInterface) AccessProviderPostProcessorServiceClient {
	return &accessProviderPostProcessorServiceClient{cc}
}

func (c *accessProviderPostProcessorServiceClient) CliVersionInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*version.CliBuildInformation, error) {
	out := new(version.CliBuildInformation)
	err := c.cc.Invoke(ctx, AccessProviderPostProcessorService_CliVersionInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessProviderPostProcessorServiceClient) PostProcessFromTarget(ctx context.Context, in *AccessProviderPostProcessorConfig, opts ...grpc.CallOption) (*AccessProviderPostProcessorResult, error) {
	out := new(AccessProviderPostProcessorResult)
	err := c.cc.Invoke(ctx, AccessProviderPostProcessorService_PostProcessFromTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessProviderPostProcessorServiceServer is the server API for AccessProviderPostProcessorService service.
// All implementations must embed UnimplementedAccessProviderPostProcessorServiceServer
// for forward compatibility
type AccessProviderPostProcessorServiceServer interface {
	CliVersionInformation(context.Context, *emptypb.Empty) (*version.CliBuildInformation, error)
	PostProcessFromTarget(context.Context, *AccessProviderPostProcessorConfig) (*AccessProviderPostProcessorResult, error)
	mustEmbedUnimplementedAccessProviderPostProcessorServiceServer()
}

// UnimplementedAccessProviderPostProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessProviderPostProcessorServiceServer struct {
}

func (UnimplementedAccessProviderPostProcessorServiceServer) CliVersionInformation(context.Context, *emptypb.Empty) (*version.CliBuildInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CliVersionInformation not implemented")
}
func (UnimplementedAccessProviderPostProcessorServiceServer) PostProcessFromTarget(context.Context, *AccessProviderPostProcessorConfig) (*AccessProviderPostProcessorResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProcessFromTarget not implemented")
}
func (UnimplementedAccessProviderPostProcessorServiceServer) mustEmbedUnimplementedAccessProviderPostProcessorServiceServer() {
}

// UnsafeAccessProviderPostProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessProviderPostProcessorServiceServer will
// result in compilation errors.
type UnsafeAccessProviderPostProcessorServiceServer interface {
	mustEmbedUnimplementedAccessProviderPostProcessorServiceServer()
}

func RegisterAccessProviderPostProcessorServiceServer(s grpc.ServiceRegistrar, srv AccessProviderPostProcessorServiceServer) {
	s.RegisterService(&AccessProviderPostProcessorService_ServiceDesc, srv)
}

func _AccessProviderPostProcessorService_CliVersionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessProviderPostProcessorServiceServer).CliVersionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessProviderPostProcessorService_CliVersionInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessProviderPostProcessorServiceServer).CliVersionInformation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessProviderPostProcessorService_PostProcessFromTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessProviderPostProcessorConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessProviderPostProcessorServiceServer).PostProcessFromTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessProviderPostProcessorService_PostProcessFromTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessProviderPostProcessorServiceServer).PostProcessFromTarget(ctx, req.(*AccessProviderPostProcessorConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessProviderPostProcessorService_ServiceDesc is the grpc.ServiceDesc for AccessProviderPostProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessProviderPostProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "access_provider_post_processor.AccessProviderPostProcessorService",
	HandlerType: (*AccessProviderPostProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CliVersionInformation",
			Handler:    _AccessProviderPostProcessorService_CliVersionInformation_Handler,
		},
		{
			MethodName: "PostProcessFromTarget",
			Handler:    _AccessProviderPostProcessorService_PostProcessFromTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access_provider_post_processor/access_provider_post_processor.proto",
}
