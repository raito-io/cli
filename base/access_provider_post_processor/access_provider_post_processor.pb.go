// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: access_provider_post_processor/access_provider_post_processor.proto

package access_provider_post_processor

import (
	config "github.com/raito-io/cli/base/util/config"
	version "github.com/raito-io/cli/base/util/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessProviderPostProcessor contains all necessary configuration parameters to import Data from Raito into DS
type AccessProviderPostProcessorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigMap *config.ConfigMap `protobuf:"bytes,1,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty"`
	// TargetFile points to the file where the plugin needs to export the access control naming.
	InputFile                string `protobuf:"bytes,2,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	OutputFile               string `protobuf:"bytes,3,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	TagOverwriteKeyForName   string `protobuf:"bytes,4,opt,name=tag_overwrite_key_for_name,json=tagOverwriteKeyForName,proto3" json:"tag_overwrite_key_for_name,omitempty"`
	TagOverwriteKeyForOwners string `protobuf:"bytes,5,opt,name=tag_overwrite_key_for_owners,json=tagOverwriteKeyForOwners,proto3" json:"tag_overwrite_key_for_owners,omitempty"`
}

func (x *AccessProviderPostProcessorConfig) Reset() {
	*x = AccessProviderPostProcessorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessProviderPostProcessorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessProviderPostProcessorConfig) ProtoMessage() {}

func (x *AccessProviderPostProcessorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessProviderPostProcessorConfig.ProtoReflect.Descriptor instead.
func (*AccessProviderPostProcessorConfig) Descriptor() ([]byte, []int) {
	return file_access_provider_post_processor_access_provider_post_processor_proto_rawDescGZIP(), []int{0}
}

func (x *AccessProviderPostProcessorConfig) GetConfigMap() *config.ConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *AccessProviderPostProcessorConfig) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

func (x *AccessProviderPostProcessorConfig) GetOutputFile() string {
	if x != nil {
		return x.OutputFile
	}
	return ""
}

func (x *AccessProviderPostProcessorConfig) GetTagOverwriteKeyForName() string {
	if x != nil {
		return x.TagOverwriteKeyForName
	}
	return ""
}

func (x *AccessProviderPostProcessorConfig) GetTagOverwriteKeyForOwners() string {
	if x != nil {
		return x.TagOverwriteKeyForOwners
	}
	return ""
}

// AccessSyncResult represents the result from the data access sync process.
// A potential error is also modeled in here so specific errors remain intact when passed over RPC.
type AccessProviderPostProcessorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessProviderTouchedCount int32 `protobuf:"varint,1,opt,name=access_provider_touched_count,json=accessProviderTouchedCount,proto3" json:"access_provider_touched_count,omitempty"`
}

func (x *AccessProviderPostProcessorResult) Reset() {
	*x = AccessProviderPostProcessorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessProviderPostProcessorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessProviderPostProcessorResult) ProtoMessage() {}

func (x *AccessProviderPostProcessorResult) ProtoReflect() protoreflect.Message {
	mi := &file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessProviderPostProcessorResult.ProtoReflect.Descriptor instead.
func (*AccessProviderPostProcessorResult) Descriptor() ([]byte, []int) {
	return file_access_provider_post_processor_access_provider_post_processor_proto_rawDescGZIP(), []int{1}
}

func (x *AccessProviderPostProcessorResult) GetAccessProviderTouchedCount() int32 {
	if x != nil {
		return x.AccessProviderTouchedCount
	}
	return 0
}

var File_access_provider_post_processor_access_provider_post_processor_proto protoreflect.FileDescriptor

var file_access_provider_post_processor_access_provider_post_processor_proto_rawDesc = []byte{
	0x0a, 0x43, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x75, 0x74,
	0x69, 0x6c, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x21, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x61, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x61, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0x66, 0x0a, 0x21, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x98, 0x02, 0x0a, 0x22, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x52, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6c, 0x69, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x41,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x41, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x8f, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x42, 0x20, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x69, 0x74,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0xa2, 0x02, 0x03, 0x41,
	0x58, 0x58, 0xaa, 0x02, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0xca, 0x02, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0xe2, 0x02,
	0x27, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_access_provider_post_processor_access_provider_post_processor_proto_rawDescOnce sync.Once
	file_access_provider_post_processor_access_provider_post_processor_proto_rawDescData = file_access_provider_post_processor_access_provider_post_processor_proto_rawDesc
)

func file_access_provider_post_processor_access_provider_post_processor_proto_rawDescGZIP() []byte {
	file_access_provider_post_processor_access_provider_post_processor_proto_rawDescOnce.Do(func() {
		file_access_provider_post_processor_access_provider_post_processor_proto_rawDescData = protoimpl.X.CompressGZIP(file_access_provider_post_processor_access_provider_post_processor_proto_rawDescData)
	})
	return file_access_provider_post_processor_access_provider_post_processor_proto_rawDescData
}

var file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_access_provider_post_processor_access_provider_post_processor_proto_goTypes = []interface{}{
	(*AccessProviderPostProcessorConfig)(nil), // 0: access_provider_post_processor.AccessProviderPostProcessorConfig
	(*AccessProviderPostProcessorResult)(nil), // 1: access_provider_post_processor.AccessProviderPostProcessorResult
	(*config.ConfigMap)(nil),                  // 2: util.config.ConfigMap
	(*emptypb.Empty)(nil),                     // 3: google.protobuf.Empty
	(*version.CliBuildInformation)(nil),       // 4: util.version.CliBuildInformation
}
var file_access_provider_post_processor_access_provider_post_processor_proto_depIdxs = []int32{
	2, // 0: access_provider_post_processor.AccessProviderPostProcessorConfig.config_map:type_name -> util.config.ConfigMap
	3, // 1: access_provider_post_processor.AccessProviderPostProcessorService.CliVersionInformation:input_type -> google.protobuf.Empty
	0, // 2: access_provider_post_processor.AccessProviderPostProcessorService.PostProcessFromTarget:input_type -> access_provider_post_processor.AccessProviderPostProcessorConfig
	4, // 3: access_provider_post_processor.AccessProviderPostProcessorService.CliVersionInformation:output_type -> util.version.CliBuildInformation
	1, // 4: access_provider_post_processor.AccessProviderPostProcessorService.PostProcessFromTarget:output_type -> access_provider_post_processor.AccessProviderPostProcessorResult
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_access_provider_post_processor_access_provider_post_processor_proto_init() }
func file_access_provider_post_processor_access_provider_post_processor_proto_init() {
	if File_access_provider_post_processor_access_provider_post_processor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessProviderPostProcessorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessProviderPostProcessorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_access_provider_post_processor_access_provider_post_processor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_access_provider_post_processor_access_provider_post_processor_proto_goTypes,
		DependencyIndexes: file_access_provider_post_processor_access_provider_post_processor_proto_depIdxs,
		MessageInfos:      file_access_provider_post_processor_access_provider_post_processor_proto_msgTypes,
	}.Build()
	File_access_provider_post_processor_access_provider_post_processor_proto = out.File
	file_access_provider_post_processor_access_provider_post_processor_proto_rawDesc = nil
	file_access_provider_post_processor_access_provider_post_processor_proto_goTypes = nil
	file_access_provider_post_processor_access_provider_post_processor_proto_depIdxs = nil
}
