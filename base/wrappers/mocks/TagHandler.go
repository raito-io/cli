// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	tag "github.com/raito-io/cli/base/tag"
	mock "github.com/stretchr/testify/mock"
)

// TagHandler is an autogenerated mock type for the TagHandler type
type TagHandler struct {
	mock.Mock
}

type TagHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *TagHandler) EXPECT() *TagHandler_Expecter {
	return &TagHandler_Expecter{mock: &_m.Mock}
}

// AddTags provides a mock function with given fields: tags
func (_m *TagHandler) AddTags(tags ...*tag.TagImportObject) error {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...*tag.TagImportObject) error); ok {
		r0 = rf(tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagHandler_AddTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTags'
type TagHandler_AddTags_Call struct {
	*mock.Call
}

// AddTags is a helper method to define mock.On call
//   - tags ...*tag.TagImportObject
func (_e *TagHandler_Expecter) AddTags(tags ...interface{}) *TagHandler_AddTags_Call {
	return &TagHandler_AddTags_Call{Call: _e.mock.On("AddTags",
		append([]interface{}{}, tags...)...)}
}

func (_c *TagHandler_AddTags_Call) Run(run func(tags ...*tag.TagImportObject)) *TagHandler_AddTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*tag.TagImportObject, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*tag.TagImportObject)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TagHandler_AddTags_Call) Return(_a0 error) *TagHandler_AddTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TagHandler_AddTags_Call) RunAndReturn(run func(...*tag.TagImportObject) error) *TagHandler_AddTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewTagHandler creates a new instance of TagHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagHandler {
	mock := &TagHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
