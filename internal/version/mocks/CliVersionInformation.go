// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	semver "github.com/Masterminds/semver/v3"
	mock "github.com/stretchr/testify/mock"
)

// CliVersionInformation is an autogenerated mock type for the CliVersionInformation type
type CliVersionInformation struct {
	mock.Mock
}

type CliVersionInformation_Expecter struct {
	mock *mock.Mock
}

func (_m *CliVersionInformation) EXPECT() *CliVersionInformation_Expecter {
	return &CliVersionInformation_Expecter{mock: &_m.Mock}
}

// GetCliMinimalCompatibleVersion provides a mock function with given fields:
func (_m *CliVersionInformation) GetCliMinimalCompatibleVersion() *semver.Version {
	ret := _m.Called()

	var r0 *semver.Version
	if rf, ok := ret.Get(0).(func() *semver.Version); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*semver.Version)
		}
	}

	return r0
}

// CliVersionInformation_GetCliMinimalCompatibleVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCliMinimalCompatibleVersion'
type CliVersionInformation_GetCliMinimalCompatibleVersion_Call struct {
	*mock.Call
}

// GetCliMinimalCompatibleVersion is a helper method to define mock.On call
func (_e *CliVersionInformation_Expecter) GetCliMinimalCompatibleVersion() *CliVersionInformation_GetCliMinimalCompatibleVersion_Call {
	return &CliVersionInformation_GetCliMinimalCompatibleVersion_Call{Call: _e.mock.On("GetCliMinimalCompatibleVersion")}
}

func (_c *CliVersionInformation_GetCliMinimalCompatibleVersion_Call) Run(run func()) *CliVersionInformation_GetCliMinimalCompatibleVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CliVersionInformation_GetCliMinimalCompatibleVersion_Call) Return(_a0 *semver.Version) *CliVersionInformation_GetCliMinimalCompatibleVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CliVersionInformation_GetCliMinimalCompatibleVersion_Call) RunAndReturn(run func() *semver.Version) *CliVersionInformation_GetCliMinimalCompatibleVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetCliVersion provides a mock function with given fields:
func (_m *CliVersionInformation) GetCliVersion() *semver.Version {
	ret := _m.Called()

	var r0 *semver.Version
	if rf, ok := ret.Get(0).(func() *semver.Version); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*semver.Version)
		}
	}

	return r0
}

// CliVersionInformation_GetCliVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCliVersion'
type CliVersionInformation_GetCliVersion_Call struct {
	*mock.Call
}

// GetCliVersion is a helper method to define mock.On call
func (_e *CliVersionInformation_Expecter) GetCliVersion() *CliVersionInformation_GetCliVersion_Call {
	return &CliVersionInformation_GetCliVersion_Call{Call: _e.mock.On("GetCliVersion")}
}

func (_c *CliVersionInformation_GetCliVersion_Call) Run(run func()) *CliVersionInformation_GetCliVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CliVersionInformation_GetCliVersion_Call) Return(_a0 *semver.Version) *CliVersionInformation_GetCliVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CliVersionInformation_GetCliVersion_Call) RunAndReturn(run func() *semver.Version) *CliVersionInformation_GetCliVersion_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCliVersionInformation interface {
	mock.TestingT
	Cleanup(func())
}

// NewCliVersionInformation creates a new instance of CliVersionInformation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCliVersionInformation(t mockConstructorTestingTNewCliVersionInformation) *CliVersionInformation {
	mock := &CliVersionInformation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
