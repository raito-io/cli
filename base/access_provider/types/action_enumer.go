// Code generated by "enumer -type=Action -json -yaml -transform=lower"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActionName = "promisegrantdenymaskfilteredpurposeshare"

var _ActionIndex = [...]uint8{0, 7, 12, 16, 20, 28, 35, 40}

const _ActionLowerName = "promisegrantdenymaskfilteredpurposeshare"

func (i Action) String() string {
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionNoOp() {
	var x [1]struct{}
	_ = x[Promise-(0)]
	_ = x[Grant-(1)]
	_ = x[Deny-(2)]
	_ = x[Mask-(3)]
	_ = x[Filtered-(4)]
	_ = x[Purpose-(5)]
	_ = x[Share-(6)]
}

var _ActionValues = []Action{Promise, Grant, Deny, Mask, Filtered, Purpose, Share}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:7]:        Promise,
	_ActionLowerName[0:7]:   Promise,
	_ActionName[7:12]:       Grant,
	_ActionLowerName[7:12]:  Grant,
	_ActionName[12:16]:      Deny,
	_ActionLowerName[12:16]: Deny,
	_ActionName[16:20]:      Mask,
	_ActionLowerName[16:20]: Mask,
	_ActionName[20:28]:      Filtered,
	_ActionLowerName[20:28]: Filtered,
	_ActionName[28:35]:      Purpose,
	_ActionLowerName[28:35]: Purpose,
	_ActionName[35:40]:      Share,
	_ActionLowerName[35:40]: Share,
}

var _ActionNames = []string{
	_ActionName[0:7],
	_ActionName[7:12],
	_ActionName[12:16],
	_ActionName[16:20],
	_ActionName[20:28],
	_ActionName[28:35],
	_ActionName[35:40],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Action
func (i Action) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Action
func (i *Action) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Action should be a string, got %s", data)
	}

	var err error
	*i, err = ActionString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Action
func (i Action) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Action
func (i *Action) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ActionString(s)
	return err
}
