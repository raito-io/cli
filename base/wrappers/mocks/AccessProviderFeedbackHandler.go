// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	sync_to_target "github.com/raito-io/cli/base/access_provider/sync_to_target"
	mock "github.com/stretchr/testify/mock"
)

// AccessProviderFeedbackHandler is an autogenerated mock type for the AccessProviderFeedbackHandler type
type AccessProviderFeedbackHandler struct {
	mock.Mock
}

type AccessProviderFeedbackHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessProviderFeedbackHandler) EXPECT() *AccessProviderFeedbackHandler_Expecter {
	return &AccessProviderFeedbackHandler_Expecter{mock: &_m.Mock}
}

// AddAccessProviderFeedback provides a mock function with given fields: accessProviderFeedback
func (_m *AccessProviderFeedbackHandler) AddAccessProviderFeedback(accessProviderFeedback sync_to_target.AccessProviderSyncFeedback) error {
	ret := _m.Called(accessProviderFeedback)

	if len(ret) == 0 {
		panic("no return value specified for AddAccessProviderFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sync_to_target.AccessProviderSyncFeedback) error); ok {
		r0 = rf(accessProviderFeedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccessProviderFeedback'
type AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call struct {
	*mock.Call
}

// AddAccessProviderFeedback is a helper method to define mock.On call
//   - accessProviderFeedback sync_to_target.AccessProviderSyncFeedback
func (_e *AccessProviderFeedbackHandler_Expecter) AddAccessProviderFeedback(accessProviderFeedback interface{}) *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call {
	return &AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call{Call: _e.mock.On("AddAccessProviderFeedback", accessProviderFeedback)}
}

func (_c *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call) Run(run func(accessProviderFeedback sync_to_target.AccessProviderSyncFeedback)) *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sync_to_target.AccessProviderSyncFeedback))
	})
	return _c
}

func (_c *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call) Return(_a0 error) *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call) RunAndReturn(run func(sync_to_target.AccessProviderSyncFeedback) error) *AccessProviderFeedbackHandler_AddAccessProviderFeedback_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessProviderFeedbackHandler creates a new instance of AccessProviderFeedbackHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessProviderFeedbackHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessProviderFeedbackHandler {
	mock := &AccessProviderFeedbackHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
