// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tag/tag.proto

package tag

import (
	context "context"
	version "github.com/raito-io/cli/base/util/version"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagSyncServiceClient is the client API for TagSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagSyncServiceClient interface {
	CliVersionInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*version.CliBuildInformation, error)
	SyncTags(ctx context.Context, in *TagSyncConfig, opts ...grpc.CallOption) (*TagSyncResult, error)
}

type tagSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagSyncServiceClient(cc grpc.ClientConnInterface) TagSyncServiceClient {
	return &tagSyncServiceClient{cc}
}

func (c *tagSyncServiceClient) CliVersionInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*version.CliBuildInformation, error) {
	out := new(version.CliBuildInformation)
	err := c.cc.Invoke(ctx, "/tag.TagSyncService/CliVersionInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagSyncServiceClient) SyncTags(ctx context.Context, in *TagSyncConfig, opts ...grpc.CallOption) (*TagSyncResult, error) {
	out := new(TagSyncResult)
	err := c.cc.Invoke(ctx, "/tag.TagSyncService/SyncTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagSyncServiceServer is the server API for TagSyncService service.
// All implementations must embed UnimplementedTagSyncServiceServer
// for forward compatibility
type TagSyncServiceServer interface {
	CliVersionInformation(context.Context, *emptypb.Empty) (*version.CliBuildInformation, error)
	SyncTags(context.Context, *TagSyncConfig) (*TagSyncResult, error)
	mustEmbedUnimplementedTagSyncServiceServer()
}

// UnimplementedTagSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagSyncServiceServer struct {
}

func (UnimplementedTagSyncServiceServer) CliVersionInformation(context.Context, *emptypb.Empty) (*version.CliBuildInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CliVersionInformation not implemented")
}
func (UnimplementedTagSyncServiceServer) SyncTags(context.Context, *TagSyncConfig) (*TagSyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTags not implemented")
}
func (UnimplementedTagSyncServiceServer) mustEmbedUnimplementedTagSyncServiceServer() {}

// UnsafeTagSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagSyncServiceServer will
// result in compilation errors.
type UnsafeTagSyncServiceServer interface {
	mustEmbedUnimplementedTagSyncServiceServer()
}

func RegisterTagSyncServiceServer(s grpc.ServiceRegistrar, srv TagSyncServiceServer) {
	s.RegisterService(&TagSyncService_ServiceDesc, srv)
}

func _TagSyncService_CliVersionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSyncServiceServer).CliVersionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagSyncService/CliVersionInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSyncServiceServer).CliVersionInformation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagSyncService_SyncTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagSyncConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSyncServiceServer).SyncTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagSyncService/SyncTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSyncServiceServer).SyncTags(ctx, req.(*TagSyncConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// TagSyncService_ServiceDesc is the grpc.ServiceDesc for TagSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.TagSyncService",
	HandlerType: (*TagSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CliVersionInformation",
			Handler:    _TagSyncService_CliVersionInformation_Handler,
		},
		{
			MethodName: "SyncTags",
			Handler:    _TagSyncService_SyncTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag/tag.proto",
}
